// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { TimeSystem } from "../../TimeSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type TimeSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "time", name: "TimeSystem" }))
TimeSystemType constant timeSystem = TimeSystemType.wrap(
  0x737974696d650000000000000000000054696d6553797374656d000000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title TimeSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library TimeSystemLib {
  error TimeSystemLib_CallingFromRootSystem();

  function passTurns(TimeSystemType self, bytes32 targetEntity, uint256 timeValue) internal {
    return CallWrapper(self.toResourceId(), address(0)).passTurns(targetEntity, timeValue);
  }

  function passRounds(TimeSystemType self, bytes32 targetEntity, uint256 timeValue) internal {
    return CallWrapper(self.toResourceId(), address(0)).passRounds(targetEntity, timeValue);
  }

  function passTurns(CallWrapper memory self, bytes32 targetEntity, uint256 timeValue) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TimeSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_passTurns_bytes32_uint256.passTurns, (targetEntity, timeValue));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function passRounds(CallWrapper memory self, bytes32 targetEntity, uint256 timeValue) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert TimeSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_passRounds_bytes32_uint256.passRounds, (targetEntity, timeValue));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function passTurns(RootCallWrapper memory self, bytes32 targetEntity, uint256 timeValue) internal {
    bytes memory systemCall = abi.encodeCall(_passTurns_bytes32_uint256.passTurns, (targetEntity, timeValue));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function passRounds(RootCallWrapper memory self, bytes32 targetEntity, uint256 timeValue) internal {
    bytes memory systemCall = abi.encodeCall(_passRounds_bytes32_uint256.passRounds, (targetEntity, timeValue));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(TimeSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(TimeSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(TimeSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(TimeSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(TimeSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (TimeSystemType) {
    return TimeSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(TimeSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _passTurns_bytes32_uint256 {
  function passTurns(bytes32 targetEntity, uint256 timeValue) external;
}

interface _passRounds_bytes32_uint256 {
  function passRounds(bytes32 targetEntity, uint256 timeValue) external;
}

using TimeSystemLib for TimeSystemType global;
using TimeSystemLib for CallWrapper global;
using TimeSystemLib for RootCallWrapper global;

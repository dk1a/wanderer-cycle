// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { WandererSpawnSystem } from "../../WandererSpawnSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type WandererSpawnSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "wanderer", name: "WandererSpawnSys" }))
WandererSpawnSystemType constant wandererSpawnSystem = WandererSpawnSystemType.wrap(
  0x737977616e646572657200000000000057616e6465726572537061776e537973
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title WandererSpawnSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library WandererSpawnSystemLib {
  error WandererSpawnSystemLib_CallingFromRootSystem();
  error WandererSpawn_InvalidGuise();

  function spawnWanderer(
    WandererSpawnSystemType self,
    bytes32 guiseEntity
  ) internal returns (bytes32 wandererEntity, bytes32 cycleEntity) {
    return CallWrapper(self.toResourceId(), address(0)).spawnWanderer(guiseEntity);
  }

  function spawnWanderer(
    CallWrapper memory self,
    bytes32 guiseEntity
  ) internal returns (bytes32 wandererEntity, bytes32 cycleEntity) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert WandererSpawnSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_spawnWanderer_bytes32.spawnWanderer, (guiseEntity));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32, bytes32));
  }

  function spawnWanderer(
    RootCallWrapper memory self,
    bytes32 guiseEntity
  ) internal returns (bytes32 wandererEntity, bytes32 cycleEntity) {
    bytes memory systemCall = abi.encodeCall(_spawnWanderer_bytes32.spawnWanderer, (guiseEntity));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes32, bytes32));
  }

  function callFrom(WandererSpawnSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(WandererSpawnSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(WandererSpawnSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(WandererSpawnSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(WandererSpawnSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (WandererSpawnSystemType) {
    return WandererSpawnSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(WandererSpawnSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _spawnWanderer_bytes32 {
  function spawnWanderer(bytes32 guiseEntity) external;
}

using WandererSpawnSystemLib for WandererSpawnSystemType global;
using WandererSpawnSystemLib for CallWrapper global;
using WandererSpawnSystemLib for RootCallWrapper global;

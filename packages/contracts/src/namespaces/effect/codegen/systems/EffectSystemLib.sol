// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EffectSystem } from "../../EffectSystem.sol";
import { GenericDurationData } from "../../../duration/Duration.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type EffectSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "effect", name: "EffectSystem" }))
EffectSystemType constant effectSystem = EffectSystemType.wrap(
  0x7379656666656374000000000000000045666665637453797374656d00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title EffectSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library EffectSystemLib {
  error EffectSystemLib_CallingFromRootSystem();

  function applyTimedEffect(
    EffectSystemType self,
    bytes32 targetEntity,
    bytes32 applicationEntity,
    GenericDurationData memory duration
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).applyTimedEffect(targetEntity, applicationEntity, duration);
  }

  function applyEffect(EffectSystemType self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).applyEffect(targetEntity, applicationEntity);
  }

  function removeEffect(EffectSystemType self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeEffect(targetEntity, applicationEntity);
  }

  function applyTimedEffect(
    CallWrapper memory self,
    bytes32 targetEntity,
    bytes32 applicationEntity,
    GenericDurationData memory duration
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EffectSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _applyTimedEffect_bytes32_bytes32_GenericDurationData.applyTimedEffect,
      (targetEntity, applicationEntity, duration)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function applyEffect(CallWrapper memory self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EffectSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _applyEffect_bytes32_bytes32.applyEffect,
      (targetEntity, applicationEntity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function removeEffect(CallWrapper memory self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EffectSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _removeEffect_bytes32_bytes32.removeEffect,
      (targetEntity, applicationEntity)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function applyTimedEffect(
    RootCallWrapper memory self,
    bytes32 targetEntity,
    bytes32 applicationEntity,
    GenericDurationData memory duration
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _applyTimedEffect_bytes32_bytes32_GenericDurationData.applyTimedEffect,
      (targetEntity, applicationEntity, duration)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function applyEffect(RootCallWrapper memory self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    bytes memory systemCall = abi.encodeCall(
      _applyEffect_bytes32_bytes32.applyEffect,
      (targetEntity, applicationEntity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function removeEffect(RootCallWrapper memory self, bytes32 targetEntity, bytes32 applicationEntity) internal {
    bytes memory systemCall = abi.encodeCall(
      _removeEffect_bytes32_bytes32.removeEffect,
      (targetEntity, applicationEntity)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(EffectSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(EffectSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(EffectSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(EffectSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(EffectSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (EffectSystemType) {
    return EffectSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(EffectSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _applyTimedEffect_bytes32_bytes32_GenericDurationData {
  function applyTimedEffect(
    bytes32 targetEntity,
    bytes32 applicationEntity,
    GenericDurationData memory duration
  ) external;
}

interface _applyEffect_bytes32_bytes32 {
  function applyEffect(bytes32 targetEntity, bytes32 applicationEntity) external;
}

interface _removeEffect_bytes32_bytes32 {
  function removeEffect(bytes32 targetEntity, bytes32 applicationEntity) external;
}

using EffectSystemLib for EffectSystemType global;
using EffectSystemLib for CallWrapper global;
using EffectSystemLib for RootCallWrapper global;

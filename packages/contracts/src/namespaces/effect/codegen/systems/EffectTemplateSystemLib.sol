// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EffectTemplateSystem } from "../../EffectTemplateSystem.sol";
import { EffectTemplateData } from "../tables/EffectTemplate.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type EffectTemplateSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "effect", name: "EffectTemplateSy" }))
EffectTemplateSystemType constant effectTemplateSystem = EffectTemplateSystemType.wrap(
  0x7379656666656374000000000000000045666665637454656d706c6174655379
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title EffectTemplateSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library EffectTemplateSystemLib {
  error EffectTemplateSystemLib_CallingFromRootSystem();
  error EffectTemplateSystem_LengthMismatch();
  error EffectTemplateSystem_InvalidStatmod(bytes32 statmodEntity);

  function setEffectTemplate(
    EffectTemplateSystemType self,
    bytes32 applicationEntity,
    EffectTemplateData memory effectTemplateData
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).setEffectTemplate(applicationEntity, effectTemplateData);
  }

  function createEffectTemplateFromAffixes(
    EffectTemplateSystemType self,
    bytes32 applicationEntity,
    bytes32[] memory affixEntities
  ) internal {
    return
      CallWrapper(self.toResourceId(), address(0)).createEffectTemplateFromAffixes(applicationEntity, affixEntities);
  }

  function setEffectTemplate(
    CallWrapper memory self,
    bytes32 applicationEntity,
    EffectTemplateData memory effectTemplateData
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EffectTemplateSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _setEffectTemplate_bytes32_EffectTemplateData.setEffectTemplate,
      (applicationEntity, effectTemplateData)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function createEffectTemplateFromAffixes(
    CallWrapper memory self,
    bytes32 applicationEntity,
    bytes32[] memory affixEntities
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EffectTemplateSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _createEffectTemplateFromAffixes_bytes32_bytes32Array.createEffectTemplateFromAffixes,
      (applicationEntity, affixEntities)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setEffectTemplate(
    RootCallWrapper memory self,
    bytes32 applicationEntity,
    EffectTemplateData memory effectTemplateData
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _setEffectTemplate_bytes32_EffectTemplateData.setEffectTemplate,
      (applicationEntity, effectTemplateData)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function createEffectTemplateFromAffixes(
    RootCallWrapper memory self,
    bytes32 applicationEntity,
    bytes32[] memory affixEntities
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _createEffectTemplateFromAffixes_bytes32_bytes32Array.createEffectTemplateFromAffixes,
      (applicationEntity, affixEntities)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(EffectTemplateSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(EffectTemplateSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(EffectTemplateSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(EffectTemplateSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(EffectTemplateSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (EffectTemplateSystemType) {
    return EffectTemplateSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(EffectTemplateSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setEffectTemplate_bytes32_EffectTemplateData {
  function setEffectTemplate(bytes32 applicationEntity, EffectTemplateData memory effectTemplateData) external;
}

interface _createEffectTemplateFromAffixes_bytes32_bytes32Array {
  function createEffectTemplateFromAffixes(bytes32 applicationEntity, bytes32[] memory affixEntities) external;
}

using EffectTemplateSystemLib for EffectTemplateSystemType global;
using EffectTemplateSystemLib for CallWrapper global;
using EffectTemplateSystemLib for RootCallWrapper global;

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AffixSystem } from "../../AffixSystem.sol";
import { AffixPartId } from "../../../../codegen/common.sol";
import { AffixAvailabilityTargetId } from "../../types.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AffixSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "affix", name: "AffixSystem" }))
AffixSystemType constant affixSystem = AffixSystemType.wrap(
  0x73796166666978000000000000000000416666697853797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AffixSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AffixSystemLib {
  error AffixSystemLib_CallingFromRootSystem();
  error AffixSystem_NoAvailableAffix(
    AffixPartId affixPartId,
    AffixAvailabilityTargetId affixAvailabilityTargetId,
    uint32 affixTier
  );
  error AffixSystem_InvalidTierName(uint32 affixTier, string name);
  error AffixSystem_InvalidMinMax(uint32 min, uint32 max);
  error AffixSystem_MalformedInputManualPick(uint256 affixPartIdsLength, uint256 namesLength, uint256 affixTiersLength);

  function instantiateRandomAffixes(
    AffixSystemType self,
    AffixPartId[] memory affixPartIds,
    bytes32[] memory excludeProtoEntities,
    AffixAvailabilityTargetId affixAvailabilityTargetId,
    uint32 affixTier,
    uint256 randomness
  ) internal returns (bytes32[] memory affixEntities) {
    return
      CallWrapper(self.toResourceId(), address(0)).instantiateRandomAffixes(
        affixPartIds,
        excludeProtoEntities,
        affixAvailabilityTargetId,
        affixTier,
        randomness
      );
  }

  function instantiateManualAffixesMax(
    AffixSystemType self,
    AffixPartId[] memory affixPartIds,
    string[] memory names,
    uint32[] memory affixTiers
  ) internal returns (bytes32[] memory affixEntities) {
    return CallWrapper(self.toResourceId(), address(0)).instantiateManualAffixesMax(affixPartIds, names, affixTiers);
  }

  function instantiateRandomAffixes(
    CallWrapper memory self,
    AffixPartId[] memory affixPartIds,
    bytes32[] memory excludeProtoEntities,
    AffixAvailabilityTargetId affixAvailabilityTargetId,
    uint32 affixTier,
    uint256 randomness
  ) internal returns (bytes32[] memory affixEntities) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AffixSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _instantiateRandomAffixes_AffixPartIdArray_bytes32Array_AffixAvailabilityTargetId_uint32_uint256
        .instantiateRandomAffixes,
      (affixPartIds, excludeProtoEntities, affixAvailabilityTargetId, affixTier, randomness)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32[]));
  }

  function instantiateManualAffixesMax(
    CallWrapper memory self,
    AffixPartId[] memory affixPartIds,
    string[] memory names,
    uint32[] memory affixTiers
  ) internal returns (bytes32[] memory affixEntities) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AffixSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _instantiateManualAffixesMax_AffixPartIdArray_stringArray_uint32Array.instantiateManualAffixesMax,
      (affixPartIds, names, affixTiers)
    );

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32[]));
  }

  function instantiateRandomAffixes(
    RootCallWrapper memory self,
    AffixPartId[] memory affixPartIds,
    bytes32[] memory excludeProtoEntities,
    AffixAvailabilityTargetId affixAvailabilityTargetId,
    uint32 affixTier,
    uint256 randomness
  ) internal returns (bytes32[] memory affixEntities) {
    bytes memory systemCall = abi.encodeCall(
      _instantiateRandomAffixes_AffixPartIdArray_bytes32Array_AffixAvailabilityTargetId_uint32_uint256
        .instantiateRandomAffixes,
      (affixPartIds, excludeProtoEntities, affixAvailabilityTargetId, affixTier, randomness)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes32[]));
  }

  function instantiateManualAffixesMax(
    RootCallWrapper memory self,
    AffixPartId[] memory affixPartIds,
    string[] memory names,
    uint32[] memory affixTiers
  ) internal returns (bytes32[] memory affixEntities) {
    bytes memory systemCall = abi.encodeCall(
      _instantiateManualAffixesMax_AffixPartIdArray_stringArray_uint32Array.instantiateManualAffixesMax,
      (affixPartIds, names, affixTiers)
    );

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes32[]));
  }

  function callFrom(AffixSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AffixSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(AffixSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AffixSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AffixSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AffixSystemType) {
    return AffixSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AffixSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _instantiateRandomAffixes_AffixPartIdArray_bytes32Array_AffixAvailabilityTargetId_uint32_uint256 {
  function instantiateRandomAffixes(
    AffixPartId[] memory affixPartIds,
    bytes32[] memory excludeProtoEntities,
    AffixAvailabilityTargetId affixAvailabilityTargetId,
    uint32 affixTier,
    uint256 randomness
  ) external;
}

interface _instantiateManualAffixesMax_AffixPartIdArray_stringArray_uint32Array {
  function instantiateManualAffixesMax(
    AffixPartId[] memory affixPartIds,
    string[] memory names,
    uint32[] memory affixTiers
  ) external;
}

using AffixSystemLib for AffixSystemType global;
using AffixSystemLib for CallWrapper global;
using AffixSystemLib for RootCallWrapper global;

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CombatRewardLogOffchainData {
  bytes32 requestId;
  uint32[3] exp;
  bytes32[] lootEntities;
}

library CombatRewardLogOffchain {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "cycle", name: "CombatRewardLogO", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f746379636c65000000000000000000436f6d6261745265776172644c6f674f);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0020010220000000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bytes32, uint32[], bytes32[])
  Schema constant _valueSchema = Schema.wrap(0x002001025f65c100000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "combatEntity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "requestId";
    fieldNames[1] = "exp";
    fieldNames[2] = "lootEntities";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set requestId.
   */
  function setRequestId(bytes32 combatEntity, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Set requestId.
   */
  function _setRequestId(bytes32 combatEntity, bytes32 requestId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((requestId)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 combatEntity, bytes32 requestId, uint32[3] memory exp, bytes32[] memory lootEntities) internal {
    bytes memory _staticData = encodeStatic(requestId);

    EncodedLengths _encodedLengths = encodeLengths(exp, lootEntities);
    bytes memory _dynamicData = encodeDynamic(exp, lootEntities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 combatEntity, bytes32 requestId, uint32[3] memory exp, bytes32[] memory lootEntities) internal {
    bytes memory _staticData = encodeStatic(requestId);

    EncodedLengths _encodedLengths = encodeLengths(exp, lootEntities);
    bytes memory _dynamicData = encodeDynamic(exp, lootEntities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 combatEntity, CombatRewardLogOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.requestId);

    EncodedLengths _encodedLengths = encodeLengths(_table.exp, _table.lootEntities);
    bytes memory _dynamicData = encodeDynamic(_table.exp, _table.lootEntities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 combatEntity, CombatRewardLogOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.requestId);

    EncodedLengths _encodedLengths = encodeLengths(_table.exp, _table.lootEntities);
    bytes memory _dynamicData = encodeDynamic(_table.exp, _table.lootEntities);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (bytes32 requestId) {
    requestId = (Bytes.getBytes32(_blob, 0));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (uint32[3] memory exp, bytes32[] memory lootEntities) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    exp = toStaticArray_uint32_3(SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    lootEntities = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (CombatRewardLogOffchainData memory _table) {
    (_table.requestId) = decodeStatic(_staticData);

    (_table.exp, _table.lootEntities) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 combatEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 combatEntity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(bytes32 requestId) internal pure returns (bytes memory) {
    return abi.encodePacked(requestId);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint32[3] memory exp,
    bytes32[] memory lootEntities
  ) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(exp.length * 4, lootEntities.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(uint32[3] memory exp, bytes32[] memory lootEntities) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode(fromStaticArray_uint32_3(exp)), EncodeArray.encode((lootEntities)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 requestId,
    uint32[3] memory exp,
    bytes32[] memory lootEntities
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(requestId);

    EncodedLengths _encodedLengths = encodeLengths(exp, lootEntities);
    bytes memory _dynamicData = encodeDynamic(exp, lootEntities);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 combatEntity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = combatEntity;

    return _keyTuple;
  }
}

/**
 * @notice Cast a dynamic array to a static array.
 * @dev In memory static arrays are just dynamic arrays without the 32 length bytes,
 * so this function moves the pointer to the first element of the dynamic array.
 * If the length of the dynamic array is smaller than the static length,
 * the function returns an uninitialized array to avoid memory corruption.
 * @param _value The dynamic array to cast.
 * @return _result The static array.
 */
function toStaticArray_uint32_3(uint32[] memory _value) pure returns (uint32[3] memory _result) {
  if (_value.length < 3) {
    // return an uninitialized array if the length is smaller than the fixed length to avoid memory corruption
    return _result;
  } else {
    // in memory static arrays are just dynamic arrays without the 32 length bytes
    // (without the length check this could lead to memory corruption)
    assembly {
      _result := add(_value, 0x20)
    }
  }
}

/**
 * @notice Copy a static array to a dynamic array.
 * @dev Static arrays don't have a length prefix, so this function copies the memory from the static array to a new dynamic array.
 * @param _value The static array to copy.
 * @return _result The dynamic array.
 */
function fromStaticArray_uint32_3(uint32[3] memory _value) pure returns (uint32[] memory _result) {
  _result = new uint32[](3);
  uint256 fromPointer;
  uint256 toPointer;
  assembly {
    fromPointer := _value
    toPointer := add(_result, 0x20)
  }
  Memory.copy(fromPointer, toPointer, 96);
}

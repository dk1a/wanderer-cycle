// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { CycleCombatRewardSystem } from "../../CycleCombatRewardSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type CycleCombatRewardSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "cycle", name: "CycleCombatRewar" }))
CycleCombatRewardSystemType constant cycleCombatRewardSystem = CycleCombatRewardSystemType.wrap(
  0x73796379636c650000000000000000004379636c65436f6d6261745265776172
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title CycleCombatRewardSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library CycleCombatRewardSystemLib {
  error CycleCombatRewardSystemLib_CallingFromRootSystem();

  function claimCycleCombatReward(CycleCombatRewardSystemType self, bytes32 cycleEntity, bytes32 requestId) internal {
    return CallWrapper(self.toResourceId(), address(0)).claimCycleCombatReward(cycleEntity, requestId);
  }

  function cancelCycleCombatReward(CycleCombatRewardSystemType self, bytes32 cycleEntity, bytes32 requestId) internal {
    return CallWrapper(self.toResourceId(), address(0)).cancelCycleCombatReward(cycleEntity, requestId);
  }

  function adminMintLoot(CycleCombatRewardSystemType self, bytes32 cycleEntity, uint32 quantity, uint32 ilvl) internal {
    return CallWrapper(self.toResourceId(), address(0)).adminMintLoot(cycleEntity, quantity, ilvl);
  }

  function claimCycleCombatReward(CallWrapper memory self, bytes32 cycleEntity, bytes32 requestId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleCombatRewardSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _claimCycleCombatReward_bytes32_bytes32.claimCycleCombatReward,
      (cycleEntity, requestId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function cancelCycleCombatReward(CallWrapper memory self, bytes32 cycleEntity, bytes32 requestId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleCombatRewardSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _cancelCycleCombatReward_bytes32_bytes32.cancelCycleCombatReward,
      (cycleEntity, requestId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function adminMintLoot(CallWrapper memory self, bytes32 cycleEntity, uint32 quantity, uint32 ilvl) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert CycleCombatRewardSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _adminMintLoot_bytes32_uint32_uint32.adminMintLoot,
      (cycleEntity, quantity, ilvl)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function claimCycleCombatReward(RootCallWrapper memory self, bytes32 cycleEntity, bytes32 requestId) internal {
    bytes memory systemCall = abi.encodeCall(
      _claimCycleCombatReward_bytes32_bytes32.claimCycleCombatReward,
      (cycleEntity, requestId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function cancelCycleCombatReward(RootCallWrapper memory self, bytes32 cycleEntity, bytes32 requestId) internal {
    bytes memory systemCall = abi.encodeCall(
      _cancelCycleCombatReward_bytes32_bytes32.cancelCycleCombatReward,
      (cycleEntity, requestId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function adminMintLoot(RootCallWrapper memory self, bytes32 cycleEntity, uint32 quantity, uint32 ilvl) internal {
    bytes memory systemCall = abi.encodeCall(
      _adminMintLoot_bytes32_uint32_uint32.adminMintLoot,
      (cycleEntity, quantity, ilvl)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(CycleCombatRewardSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(CycleCombatRewardSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(
    CycleCombatRewardSystemType self,
    address from
  ) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(CycleCombatRewardSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(CycleCombatRewardSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (CycleCombatRewardSystemType) {
    return CycleCombatRewardSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(CycleCombatRewardSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _claimCycleCombatReward_bytes32_bytes32 {
  function claimCycleCombatReward(bytes32 cycleEntity, bytes32 requestId) external;
}

interface _cancelCycleCombatReward_bytes32_bytes32 {
  function cancelCycleCombatReward(bytes32 cycleEntity, bytes32 requestId) external;
}

interface _adminMintLoot_bytes32_uint32_uint32 {
  function adminMintLoot(bytes32 cycleEntity, uint32 quantity, uint32 ilvl) external;
}

using CycleCombatRewardSystemLib for CycleCombatRewardSystemType global;
using CycleCombatRewardSystemLib for CallWrapper global;
using CycleCombatRewardSystemLib for RootCallWrapper global;

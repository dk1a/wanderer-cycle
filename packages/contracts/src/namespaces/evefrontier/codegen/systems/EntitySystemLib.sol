// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { EntitySystem } from "../../EntitySystem.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type EntitySystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "evefrontier", name: "EntitySystem" }))
EntitySystemType constant entitySystem = EntitySystemType.wrap(
  0x737965766566726f6e74696572000000456e7469747953797374656d00000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title EntitySystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library EntitySystemLib {
  error EntitySystemLib_CallingFromRootSystem();
  error Entity_MethodNotSupported();

  function registerClass(
    EntitySystemType self,
    ResourceId[] memory scopedSystemIds
  ) internal returns (uint256 classId) {
    return CallWrapper(self.toResourceId(), address(0)).registerClass(scopedSystemIds);
  }

  function instantiate(
    EntitySystemType self,
    uint256 classId,
    address accessRoleMember
  ) internal returns (uint256 objectId) {
    return CallWrapper(self.toResourceId(), address(0)).instantiate(classId, accessRoleMember);
  }

  function registerClass(EntitySystemType self, uint256 __aux0, ResourceId[] memory __aux1) internal {
    return CallWrapper(self.toResourceId(), address(0)).registerClass(__aux0, __aux1);
  }

  function scopedRegisterClass(
    EntitySystemType self,
    uint256 __aux0,
    address __aux1,
    ResourceId[] memory __aux2
  ) internal {
    return CallWrapper(self.toResourceId(), address(0)).scopedRegisterClass(__aux0, __aux1, __aux2);
  }

  function instantiate(EntitySystemType self, uint256 __aux0, uint256 __aux1, address __aux2) internal {
    return CallWrapper(self.toResourceId(), address(0)).instantiate(__aux0, __aux1, __aux2);
  }

  function addToScope(EntitySystemType self, uint256 entityId, ResourceId[] memory scopedSystemIds) internal {
    return CallWrapper(self.toResourceId(), address(0)).addToScope(entityId, scopedSystemIds);
  }

  function registerClass(
    CallWrapper memory self,
    ResourceId[] memory scopedSystemIds
  ) internal returns (uint256 classId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_registerClass_ResourceIdArray.registerClass, (scopedSystemIds));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function instantiate(
    CallWrapper memory self,
    uint256 classId,
    address accessRoleMember
  ) internal returns (uint256 objectId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_instantiate_uint256_address.instantiate, (classId, accessRoleMember));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function registerClass(CallWrapper memory self, uint256 __aux0, ResourceId[] memory __aux1) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_registerClass_uint256_ResourceIdArray.registerClass, (__aux0, __aux1));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function scopedRegisterClass(
    CallWrapper memory self,
    uint256 __aux0,
    address __aux1,
    ResourceId[] memory __aux2
  ) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _scopedRegisterClass_uint256_address_ResourceIdArray.scopedRegisterClass,
      (__aux0, __aux1, __aux2)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function instantiate(CallWrapper memory self, uint256 __aux0, uint256 __aux1, address __aux2) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _instantiate_uint256_uint256_address.instantiate,
      (__aux0, __aux1, __aux2)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function addToScope(CallWrapper memory self, uint256 entityId, ResourceId[] memory scopedSystemIds) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert EntitySystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _addToScope_uint256_ResourceIdArray.addToScope,
      (entityId, scopedSystemIds)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function registerClass(
    RootCallWrapper memory self,
    ResourceId[] memory scopedSystemIds
  ) internal returns (uint256 classId) {
    bytes memory systemCall = abi.encodeCall(_registerClass_ResourceIdArray.registerClass, (scopedSystemIds));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (uint256));
  }

  function instantiate(
    RootCallWrapper memory self,
    uint256 classId,
    address accessRoleMember
  ) internal returns (uint256 objectId) {
    bytes memory systemCall = abi.encodeCall(_instantiate_uint256_address.instantiate, (classId, accessRoleMember));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (uint256));
  }

  function registerClass(RootCallWrapper memory self, uint256 __aux0, ResourceId[] memory __aux1) internal {
    bytes memory systemCall = abi.encodeCall(_registerClass_uint256_ResourceIdArray.registerClass, (__aux0, __aux1));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function scopedRegisterClass(
    RootCallWrapper memory self,
    uint256 __aux0,
    address __aux1,
    ResourceId[] memory __aux2
  ) internal {
    bytes memory systemCall = abi.encodeCall(
      _scopedRegisterClass_uint256_address_ResourceIdArray.scopedRegisterClass,
      (__aux0, __aux1, __aux2)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function instantiate(RootCallWrapper memory self, uint256 __aux0, uint256 __aux1, address __aux2) internal {
    bytes memory systemCall = abi.encodeCall(
      _instantiate_uint256_uint256_address.instantiate,
      (__aux0, __aux1, __aux2)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function addToScope(RootCallWrapper memory self, uint256 entityId, ResourceId[] memory scopedSystemIds) internal {
    bytes memory systemCall = abi.encodeCall(
      _addToScope_uint256_ResourceIdArray.addToScope,
      (entityId, scopedSystemIds)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(EntitySystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(EntitySystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(EntitySystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(EntitySystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(EntitySystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (EntitySystemType) {
    return EntitySystemType.wrap(resourceId.unwrap());
  }

  function getAddress(EntitySystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _registerClass_ResourceIdArray {
  function registerClass(ResourceId[] memory scopedSystemIds) external;
}

interface _instantiate_uint256_address {
  function instantiate(uint256 classId, address accessRoleMember) external;
}

interface _registerClass_uint256_ResourceIdArray {
  function registerClass(uint256 __aux0, ResourceId[] memory __aux1) external;
}

interface _scopedRegisterClass_uint256_address_ResourceIdArray {
  function scopedRegisterClass(uint256 __aux0, address __aux1, ResourceId[] memory __aux2) external;
}

interface _instantiate_uint256_uint256_address {
  function instantiate(uint256 __aux0, uint256 __aux1, address __aux2) external;
}

interface _addToScope_uint256_ResourceIdArray {
  function addToScope(uint256 entityId, ResourceId[] memory scopedSystemIds) external;
}

using EntitySystemLib for EntitySystemType global;
using EntitySystemLib for CallWrapper global;
using EntitySystemLib for RootCallWrapper global;

// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { CombatResult } from "../../../../codegen/common.sol";

struct CombatLogRoundOffchainData {
  CombatResult combatResult;
  uint256 initiatorActionLength;
  uint256 retaliatorActionLength;
}

library CombatLogRoundOffchain {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "combat", name: "CombatLogRoundOf", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f74636f6d6261740000000000000000436f6d6261744c6f67526f756e644f66);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0041030001202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, uint256)
  Schema constant _keySchema = Schema.wrap(0x004002005f1f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00410300001f1f00000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "entity";
    keyNames[1] = "roundIndex";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "combatResult";
    fieldNames[1] = "initiatorActionLength";
    fieldNames[2] = "retaliatorActionLength";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set combatResult.
   */
  function setCombatResult(bytes32 entity, uint256 roundIndex, CombatResult combatResult) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(combatResult)), _fieldLayout);
  }

  /**
   * @notice Set combatResult.
   */
  function _setCombatResult(bytes32 entity, uint256 roundIndex, CombatResult combatResult) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(combatResult)), _fieldLayout);
  }

  /**
   * @notice Set initiatorActionLength.
   */
  function setInitiatorActionLength(bytes32 entity, uint256 roundIndex, uint256 initiatorActionLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((initiatorActionLength)), _fieldLayout);
  }

  /**
   * @notice Set initiatorActionLength.
   */
  function _setInitiatorActionLength(bytes32 entity, uint256 roundIndex, uint256 initiatorActionLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((initiatorActionLength)), _fieldLayout);
  }

  /**
   * @notice Set retaliatorActionLength.
   */
  function setRetaliatorActionLength(bytes32 entity, uint256 roundIndex, uint256 retaliatorActionLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((retaliatorActionLength)), _fieldLayout);
  }

  /**
   * @notice Set retaliatorActionLength.
   */
  function _setRetaliatorActionLength(bytes32 entity, uint256 roundIndex, uint256 retaliatorActionLength) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((retaliatorActionLength)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entity,
    uint256 roundIndex,
    CombatResult combatResult,
    uint256 initiatorActionLength,
    uint256 retaliatorActionLength
  ) internal {
    bytes memory _staticData = encodeStatic(combatResult, initiatorActionLength, retaliatorActionLength);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entity,
    uint256 roundIndex,
    CombatResult combatResult,
    uint256 initiatorActionLength,
    uint256 retaliatorActionLength
  ) internal {
    bytes memory _staticData = encodeStatic(combatResult, initiatorActionLength, retaliatorActionLength);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entity, uint256 roundIndex, CombatLogRoundOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.combatResult,
      _table.initiatorActionLength,
      _table.retaliatorActionLength
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entity, uint256 roundIndex, CombatLogRoundOffchainData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.combatResult,
      _table.initiatorActionLength,
      _table.retaliatorActionLength
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (CombatResult combatResult, uint256 initiatorActionLength, uint256 retaliatorActionLength) {
    combatResult = CombatResult(uint8(Bytes.getBytes1(_blob, 0)));

    initiatorActionLength = (uint256(Bytes.getBytes32(_blob, 1)));

    retaliatorActionLength = (uint256(Bytes.getBytes32(_blob, 33)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CombatLogRoundOffchainData memory _table) {
    (_table.combatResult, _table.initiatorActionLength, _table.retaliatorActionLength) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entity, uint256 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entity, uint256 roundIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    CombatResult combatResult,
    uint256 initiatorActionLength,
    uint256 retaliatorActionLength
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(combatResult, initiatorActionLength, retaliatorActionLength);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    CombatResult combatResult,
    uint256 initiatorActionLength,
    uint256 retaliatorActionLength
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(combatResult, initiatorActionLength, retaliatorActionLength);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entity, uint256 roundIndex) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = entity;
    _keyTuple[1] = bytes32(uint256(roundIndex));

    return _keyTuple;
  }
}

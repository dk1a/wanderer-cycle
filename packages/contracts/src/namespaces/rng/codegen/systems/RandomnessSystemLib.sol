// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { RandomnessSystem } from "../../RandomnessSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type RandomnessSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "rng", name: "RandomnessSystem" }))
RandomnessSystemType constant randomnessSystem = RandomnessSystemType.wrap(
  0x7379726e67000000000000000000000052616e646f6d6e65737353797374656d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title RandomnessSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library RandomnessSystemLib {
  error RandomnessSystemLib_CallingFromRootSystem();

  function requestRandomness(
    RandomnessSystemType self,
    bytes32 requestOwnerEntity
  ) internal returns (bytes32 requestId) {
    return CallWrapper(self.toResourceId(), address(0)).requestRandomness(requestOwnerEntity);
  }

  function removeRequest(RandomnessSystemType self, bytes32 requestOwnerEntity, bytes32 requestId) internal {
    return CallWrapper(self.toResourceId(), address(0)).removeRequest(requestOwnerEntity, requestId);
  }

  function getRandomness(
    RandomnessSystemType self,
    bytes32 requestOwnerEntity,
    bytes32 requestId
  ) internal view returns (uint256 randomness) {
    return CallWrapper(self.toResourceId(), address(0)).getRandomness(requestOwnerEntity, requestId);
  }

  function requestRandomness(CallWrapper memory self, bytes32 requestOwnerEntity) internal returns (bytes32 requestId) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RandomnessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_requestRandomness_bytes32.requestRandomness, (requestOwnerEntity));

    bytes memory result = self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
    return abi.decode(result, (bytes32));
  }

  function removeRequest(CallWrapper memory self, bytes32 requestOwnerEntity, bytes32 requestId) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RandomnessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _removeRequest_bytes32_bytes32.removeRequest,
      (requestOwnerEntity, requestId)
    );
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function getRandomness(
    CallWrapper memory self,
    bytes32 requestOwnerEntity,
    bytes32 requestId
  ) internal view returns (uint256 randomness) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert RandomnessSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(
      _getRandomness_bytes32_bytes32.getRandomness,
      (requestOwnerEntity, requestId)
    );
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function requestRandomness(
    RootCallWrapper memory self,
    bytes32 requestOwnerEntity
  ) internal returns (bytes32 requestId) {
    bytes memory systemCall = abi.encodeCall(_requestRandomness_bytes32.requestRandomness, (requestOwnerEntity));

    bytes memory result = SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
    return abi.decode(result, (bytes32));
  }

  function removeRequest(RootCallWrapper memory self, bytes32 requestOwnerEntity, bytes32 requestId) internal {
    bytes memory systemCall = abi.encodeCall(
      _removeRequest_bytes32_bytes32.removeRequest,
      (requestOwnerEntity, requestId)
    );
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function getRandomness(
    RootCallWrapper memory self,
    bytes32 requestOwnerEntity,
    bytes32 requestId
  ) internal view returns (uint256 randomness) {
    bytes memory systemCall = abi.encodeCall(
      _getRandomness_bytes32_bytes32.getRandomness,
      (requestOwnerEntity, requestId)
    );

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function callFrom(RandomnessSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(RandomnessSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(RandomnessSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(RandomnessSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(RandomnessSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (RandomnessSystemType) {
    return RandomnessSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(RandomnessSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _requestRandomness_bytes32 {
  function requestRandomness(bytes32 requestOwnerEntity) external;
}

interface _removeRequest_bytes32_bytes32 {
  function removeRequest(bytes32 requestOwnerEntity, bytes32 requestId) external;
}

interface _getRandomness_bytes32_bytes32 {
  function getRandomness(bytes32 requestOwnerEntity, bytes32 requestId) external;
}

using RandomnessSystemLib for RandomnessSystemType global;
using RandomnessSystemLib for CallWrapper global;
using RandomnessSystemLib for RootCallWrapper global;
